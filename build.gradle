plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
}

group = 'com.meli'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.2")

}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'io.swagger:swagger-annotations:1.5.14'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
	testImplementation(platform("org.junit:junit-bom:5.10.3"))
	testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
		because("Only needed to run tests in a version of IntelliJ IDEA that bundles older versions")
	}
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
	testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}



tasks.withType(Test).configureEach {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['com/meli/weather/model/**',
										'com/meli/weather/crosscutting/constants/**',
										'com/meli/weather/crosscutting/mapper/**',
										'com/meli/weather/dataprovider/jpa/entity/**',
										'com/meli/weather/WeatherApplication.class'
			])
		}))
	}

	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}
jacoco {
	toolVersion = "0.8.11"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.9
			}
		}
	}
}